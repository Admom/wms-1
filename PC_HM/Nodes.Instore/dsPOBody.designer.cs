//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5420
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Nodes.Instore {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsPOBody")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsPOBody : global::System.Data.DataSet {
        
        private HeadersDataTable tableHeaders;
        
        private DetailsDataTable tableDetails;
        
        private SuppliersDataTable tableSuppliers;
        
        private global::System.Data.DataRelation relationHeaders_Details;
        
        private global::System.Data.DataRelation relationHeaders_Suppliers;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsPOBody() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsPOBody(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Headers"] != null)) {
                    base.Tables.Add(new HeadersDataTable(ds.Tables["Headers"]));
                }
                if ((ds.Tables["Details"] != null)) {
                    base.Tables.Add(new DetailsDataTable(ds.Tables["Details"]));
                }
                if ((ds.Tables["Suppliers"] != null)) {
                    base.Tables.Add(new SuppliersDataTable(ds.Tables["Suppliers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HeadersDataTable Headers {
            get {
                return this.tableHeaders;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DetailsDataTable Details {
            get {
                return this.tableDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SuppliersDataTable Suppliers {
            get {
                return this.tableSuppliers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsPOBody cln = ((dsPOBody)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Headers"] != null)) {
                    base.Tables.Add(new HeadersDataTable(ds.Tables["Headers"]));
                }
                if ((ds.Tables["Details"] != null)) {
                    base.Tables.Add(new DetailsDataTable(ds.Tables["Details"]));
                }
                if ((ds.Tables["Suppliers"] != null)) {
                    base.Tables.Add(new SuppliersDataTable(ds.Tables["Suppliers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableHeaders = ((HeadersDataTable)(base.Tables["Headers"]));
            if ((initTable == true)) {
                if ((this.tableHeaders != null)) {
                    this.tableHeaders.InitVars();
                }
            }
            this.tableDetails = ((DetailsDataTable)(base.Tables["Details"]));
            if ((initTable == true)) {
                if ((this.tableDetails != null)) {
                    this.tableDetails.InitVars();
                }
            }
            this.tableSuppliers = ((SuppliersDataTable)(base.Tables["Suppliers"]));
            if ((initTable == true)) {
                if ((this.tableSuppliers != null)) {
                    this.tableSuppliers.InitVars();
                }
            }
            this.relationHeaders_Details = this.Relations["Headers_Details"];
            this.relationHeaders_Suppliers = this.Relations["Headers_Suppliers"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsPOBody";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsPOBody.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableHeaders = new HeadersDataTable();
            base.Tables.Add(this.tableHeaders);
            this.tableDetails = new DetailsDataTable();
            base.Tables.Add(this.tableDetails);
            this.tableSuppliers = new SuppliersDataTable();
            base.Tables.Add(this.tableSuppliers);
            this.relationHeaders_Details = new global::System.Data.DataRelation("Headers_Details", new global::System.Data.DataColumn[] {
                        this.tableHeaders.BILL_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableDetails.BILL_IDColumn}, false);
            this.Relations.Add(this.relationHeaders_Details);
            this.relationHeaders_Suppliers = new global::System.Data.DataRelation("Headers_Suppliers", new global::System.Data.DataColumn[] {
                        this.tableHeaders.SUPPLIERColumn}, new global::System.Data.DataColumn[] {
                        this.tableSuppliers.SUP_CODEColumn}, false);
            this.Relations.Add(this.relationHeaders_Suppliers);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHeaders() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSuppliers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsPOBody ds = new dsPOBody();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void HeadersRowChangeEventHandler(object sender, HeadersRowChangeEvent e);
        
        public delegate void DetailsRowChangeEventHandler(object sender, DetailsRowChangeEvent e);
        
        public delegate void SuppliersRowChangeEventHandler(object sender, SuppliersRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HeadersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBILL_ID;
            
            private global::System.Data.DataColumn columnSUP_NAME;
            
            private global::System.Data.DataColumn columnBILL_TYPE_DESC;
            
            private global::System.Data.DataColumn columnSALES;
            
            private global::System.Data.DataColumn columnCONTRACT_NO;
            
            private global::System.Data.DataColumn columnSOURCE_BILL_ID;
            
            private global::System.Data.DataColumn columnCREATE_DATE;
            
            private global::System.Data.DataColumn columnCREATOR;
            
            private global::System.Data.DataColumn columnSUPPLIER;
            
            private global::System.Data.DataColumn columnREMARK;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadersDataTable() {
                this.TableName = "Headers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HeadersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_IDColumn {
                get {
                    return this.columnBILL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SUP_NAMEColumn {
                get {
                    return this.columnSUP_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_TYPE_DESCColumn {
                get {
                    return this.columnBILL_TYPE_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SALESColumn {
                get {
                    return this.columnSALES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTRACT_NOColumn {
                get {
                    return this.columnCONTRACT_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SOURCE_BILL_IDColumn {
                get {
                    return this.columnSOURCE_BILL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DATEColumn {
                get {
                    return this.columnCREATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATORColumn {
                get {
                    return this.columnCREATOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SUPPLIERColumn {
                get {
                    return this.columnSUPPLIER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REMARKColumn {
                get {
                    return this.columnREMARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadersRow this[int index] {
                get {
                    return ((HeadersRow)(this.Rows[index]));
                }
            }
            
            public event HeadersRowChangeEventHandler HeadersRowChanging;
            
            public event HeadersRowChangeEventHandler HeadersRowChanged;
            
            public event HeadersRowChangeEventHandler HeadersRowDeleting;
            
            public event HeadersRowChangeEventHandler HeadersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHeadersRow(HeadersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadersRow AddHeadersRow(string BILL_ID, string SUP_NAME, string BILL_TYPE_DESC, string SALES, string CONTRACT_NO, string SOURCE_BILL_ID, string CREATE_DATE, string CREATOR, string SUPPLIER, string REMARK) {
                HeadersRow rowHeadersRow = ((HeadersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BILL_ID,
                        SUP_NAME,
                        BILL_TYPE_DESC,
                        SALES,
                        CONTRACT_NO,
                        SOURCE_BILL_ID,
                        CREATE_DATE,
                        CREATOR,
                        SUPPLIER,
                        REMARK};
                rowHeadersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHeadersRow);
                return rowHeadersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadersRow FindByBILL_ID(string BILL_ID) {
                return ((HeadersRow)(this.Rows.Find(new object[] {
                            BILL_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HeadersDataTable cln = ((HeadersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HeadersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBILL_ID = base.Columns["BILL_ID"];
                this.columnSUP_NAME = base.Columns["SUP_NAME"];
                this.columnBILL_TYPE_DESC = base.Columns["BILL_TYPE_DESC"];
                this.columnSALES = base.Columns["SALES"];
                this.columnCONTRACT_NO = base.Columns["CONTRACT_NO"];
                this.columnSOURCE_BILL_ID = base.Columns["SOURCE_BILL_ID"];
                this.columnCREATE_DATE = base.Columns["CREATE_DATE"];
                this.columnCREATOR = base.Columns["CREATOR"];
                this.columnSUPPLIER = base.Columns["SUPPLIER"];
                this.columnREMARK = base.Columns["REMARK"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBILL_ID = new global::System.Data.DataColumn("BILL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_ID);
                this.columnSUP_NAME = new global::System.Data.DataColumn("SUP_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUP_NAME);
                this.columnBILL_TYPE_DESC = new global::System.Data.DataColumn("BILL_TYPE_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_TYPE_DESC);
                this.columnSALES = new global::System.Data.DataColumn("SALES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSALES);
                this.columnCONTRACT_NO = new global::System.Data.DataColumn("CONTRACT_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRACT_NO);
                this.columnSOURCE_BILL_ID = new global::System.Data.DataColumn("SOURCE_BILL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOURCE_BILL_ID);
                this.columnCREATE_DATE = new global::System.Data.DataColumn("CREATE_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DATE);
                this.columnCREATOR = new global::System.Data.DataColumn("CREATOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATOR);
                this.columnSUPPLIER = new global::System.Data.DataColumn("SUPPLIER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUPPLIER);
                this.columnREMARK = new global::System.Data.DataColumn("REMARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREMARK);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBILL_ID}, true));
                this.columnBILL_ID.AllowDBNull = false;
                this.columnBILL_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadersRow NewHeadersRow() {
                return ((HeadersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HeadersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HeadersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HeadersRowChanged != null)) {
                    this.HeadersRowChanged(this, new HeadersRowChangeEvent(((HeadersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HeadersRowChanging != null)) {
                    this.HeadersRowChanging(this, new HeadersRowChangeEvent(((HeadersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HeadersRowDeleted != null)) {
                    this.HeadersRowDeleted(this, new HeadersRowChangeEvent(((HeadersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HeadersRowDeleting != null)) {
                    this.HeadersRowDeleting(this, new HeadersRowChangeEvent(((HeadersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHeadersRow(HeadersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsPOBody ds = new dsPOBody();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HeadersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDETAIL_ID;
            
            private global::System.Data.DataColumn columnBILL_ID;
            
            private global::System.Data.DataColumn columnMATERIAL;
            
            private global::System.Data.DataColumn columnMTL_NAME;
            
            private global::System.Data.DataColumn columnPLAN_QTY;
            
            private global::System.Data.DataColumn columnUNIT;
            
            private global::System.Data.DataColumn columnPRICE;
            
            private global::System.Data.DataColumn columnSPEC;
            
            private global::System.Data.DataColumn columnREAL_QTY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsDataTable() {
                this.TableName = "Details";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DETAIL_IDColumn {
                get {
                    return this.columnDETAIL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_IDColumn {
                get {
                    return this.columnBILL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MATERIALColumn {
                get {
                    return this.columnMATERIAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MTL_NAMEColumn {
                get {
                    return this.columnMTL_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLAN_QTYColumn {
                get {
                    return this.columnPLAN_QTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNITColumn {
                get {
                    return this.columnUNIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRICEColumn {
                get {
                    return this.columnPRICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SPECColumn {
                get {
                    return this.columnSPEC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REAL_QTYColumn {
                get {
                    return this.columnREAL_QTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsRow this[int index] {
                get {
                    return ((DetailsRow)(this.Rows[index]));
                }
            }
            
            public event DetailsRowChangeEventHandler DetailsRowChanging;
            
            public event DetailsRowChangeEventHandler DetailsRowChanged;
            
            public event DetailsRowChangeEventHandler DetailsRowDeleting;
            
            public event DetailsRowChangeEventHandler DetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDetailsRow(DetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsRow AddDetailsRow(string DETAIL_ID, HeadersRow parentHeadersRowByHeaders_Details, string MATERIAL, string MTL_NAME, string PLAN_QTY, string UNIT, string PRICE, string SPEC, string REAL_QTY) {
                DetailsRow rowDetailsRow = ((DetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DETAIL_ID,
                        null,
                        MATERIAL,
                        MTL_NAME,
                        PLAN_QTY,
                        UNIT,
                        PRICE,
                        SPEC,
                        REAL_QTY};
                if ((parentHeadersRowByHeaders_Details != null)) {
                    columnValuesArray[1] = parentHeadersRowByHeaders_Details[0];
                }
                rowDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDetailsRow);
                return rowDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsRow FindByDETAIL_ID(string DETAIL_ID) {
                return ((DetailsRow)(this.Rows.Find(new object[] {
                            DETAIL_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DetailsDataTable cln = ((DetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDETAIL_ID = base.Columns["DETAIL_ID"];
                this.columnBILL_ID = base.Columns["BILL_ID"];
                this.columnMATERIAL = base.Columns["MATERIAL"];
                this.columnMTL_NAME = base.Columns["MTL_NAME"];
                this.columnPLAN_QTY = base.Columns["PLAN_QTY"];
                this.columnUNIT = base.Columns["UNIT"];
                this.columnPRICE = base.Columns["PRICE"];
                this.columnSPEC = base.Columns["SPEC"];
                this.columnREAL_QTY = base.Columns["REAL_QTY"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDETAIL_ID = new global::System.Data.DataColumn("DETAIL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDETAIL_ID);
                this.columnBILL_ID = new global::System.Data.DataColumn("BILL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_ID);
                this.columnMATERIAL = new global::System.Data.DataColumn("MATERIAL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMATERIAL);
                this.columnMTL_NAME = new global::System.Data.DataColumn("MTL_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMTL_NAME);
                this.columnPLAN_QTY = new global::System.Data.DataColumn("PLAN_QTY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPLAN_QTY);
                this.columnUNIT = new global::System.Data.DataColumn("UNIT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIT);
                this.columnPRICE = new global::System.Data.DataColumn("PRICE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE);
                this.columnSPEC = new global::System.Data.DataColumn("SPEC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPEC);
                this.columnREAL_QTY = new global::System.Data.DataColumn("REAL_QTY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREAL_QTY);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDETAIL_ID}, true));
                this.columnDETAIL_ID.AllowDBNull = false;
                this.columnDETAIL_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsRow NewDetailsRow() {
                return ((DetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DetailsRowChanged != null)) {
                    this.DetailsRowChanged(this, new DetailsRowChangeEvent(((DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DetailsRowChanging != null)) {
                    this.DetailsRowChanging(this, new DetailsRowChangeEvent(((DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DetailsRowDeleted != null)) {
                    this.DetailsRowDeleted(this, new DetailsRowChangeEvent(((DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DetailsRowDeleting != null)) {
                    this.DetailsRowDeleting(this, new DetailsRowChangeEvent(((DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDetailsRow(DetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsPOBody ds = new dsPOBody();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SuppliersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSUP_CODE;
            
            private global::System.Data.DataColumn columnPROVINCE;
            
            private global::System.Data.DataColumn columnCONTACT;
            
            private global::System.Data.DataColumn columnPOSTCODE;
            
            private global::System.Data.DataColumn columnPHONE;
            
            private global::System.Data.DataColumn columnADDRESS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuppliersDataTable() {
                this.TableName = "Suppliers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SuppliersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SuppliersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SUP_CODEColumn {
                get {
                    return this.columnSUP_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROVINCEColumn {
                get {
                    return this.columnPROVINCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTACTColumn {
                get {
                    return this.columnCONTACT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POSTCODEColumn {
                get {
                    return this.columnPOSTCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PHONEColumn {
                get {
                    return this.columnPHONE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESSColumn {
                get {
                    return this.columnADDRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuppliersRow this[int index] {
                get {
                    return ((SuppliersRow)(this.Rows[index]));
                }
            }
            
            public event SuppliersRowChangeEventHandler SuppliersRowChanging;
            
            public event SuppliersRowChangeEventHandler SuppliersRowChanged;
            
            public event SuppliersRowChangeEventHandler SuppliersRowDeleting;
            
            public event SuppliersRowChangeEventHandler SuppliersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSuppliersRow(SuppliersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuppliersRow AddSuppliersRow(HeadersRow parentHeadersRowByHeaders_Suppliers, string PROVINCE, string CONTACT, string POSTCODE, string PHONE, string ADDRESS) {
                SuppliersRow rowSuppliersRow = ((SuppliersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PROVINCE,
                        CONTACT,
                        POSTCODE,
                        PHONE,
                        ADDRESS};
                if ((parentHeadersRowByHeaders_Suppliers != null)) {
                    columnValuesArray[0] = parentHeadersRowByHeaders_Suppliers[8];
                }
                rowSuppliersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSuppliersRow);
                return rowSuppliersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SuppliersDataTable cln = ((SuppliersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SuppliersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSUP_CODE = base.Columns["SUP_CODE"];
                this.columnPROVINCE = base.Columns["PROVINCE"];
                this.columnCONTACT = base.Columns["CONTACT"];
                this.columnPOSTCODE = base.Columns["POSTCODE"];
                this.columnPHONE = base.Columns["PHONE"];
                this.columnADDRESS = base.Columns["ADDRESS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSUP_CODE = new global::System.Data.DataColumn("SUP_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUP_CODE);
                this.columnPROVINCE = new global::System.Data.DataColumn("PROVINCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROVINCE);
                this.columnCONTACT = new global::System.Data.DataColumn("CONTACT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTACT);
                this.columnPOSTCODE = new global::System.Data.DataColumn("POSTCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOSTCODE);
                this.columnPHONE = new global::System.Data.DataColumn("PHONE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHONE);
                this.columnADDRESS = new global::System.Data.DataColumn("ADDRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuppliersRow NewSuppliersRow() {
                return ((SuppliersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SuppliersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SuppliersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SuppliersRowChanged != null)) {
                    this.SuppliersRowChanged(this, new SuppliersRowChangeEvent(((SuppliersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SuppliersRowChanging != null)) {
                    this.SuppliersRowChanging(this, new SuppliersRowChangeEvent(((SuppliersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SuppliersRowDeleted != null)) {
                    this.SuppliersRowDeleted(this, new SuppliersRowChangeEvent(((SuppliersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SuppliersRowDeleting != null)) {
                    this.SuppliersRowDeleting(this, new SuppliersRowChangeEvent(((SuppliersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSuppliersRow(SuppliersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsPOBody ds = new dsPOBody();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SuppliersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HeadersRow : global::System.Data.DataRow {
            
            private HeadersDataTable tableHeaders;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHeaders = ((HeadersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BILL_ID {
                get {
                    return ((string)(this[this.tableHeaders.BILL_IDColumn]));
                }
                set {
                    this[this.tableHeaders.BILL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SUP_NAME {
                get {
                    try {
                        return ((string)(this[this.tableHeaders.SUP_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Headers”中列“SUP_NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHeaders.SUP_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BILL_TYPE_DESC {
                get {
                    try {
                        return ((string)(this[this.tableHeaders.BILL_TYPE_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Headers”中列“BILL_TYPE_DESC”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHeaders.BILL_TYPE_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SALES {
                get {
                    try {
                        return ((string)(this[this.tableHeaders.SALESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Headers”中列“SALES”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHeaders.SALESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTRACT_NO {
                get {
                    try {
                        return ((string)(this[this.tableHeaders.CONTRACT_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Headers”中列“CONTRACT_NO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHeaders.CONTRACT_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOURCE_BILL_ID {
                get {
                    try {
                        return ((string)(this[this.tableHeaders.SOURCE_BILL_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Headers”中列“SOURCE_BILL_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHeaders.SOURCE_BILL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_DATE {
                get {
                    try {
                        return ((string)(this[this.tableHeaders.CREATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Headers”中列“CREATE_DATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHeaders.CREATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATOR {
                get {
                    try {
                        return ((string)(this[this.tableHeaders.CREATORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Headers”中列“CREATOR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHeaders.CREATORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SUPPLIER {
                get {
                    try {
                        return ((string)(this[this.tableHeaders.SUPPLIERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Headers”中列“SUPPLIER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHeaders.SUPPLIERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REMARK {
                get {
                    try {
                        return ((string)(this[this.tableHeaders.REMARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Headers”中列“REMARK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHeaders.REMARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSUP_NAMENull() {
                return this.IsNull(this.tableHeaders.SUP_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSUP_NAMENull() {
                this[this.tableHeaders.SUP_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILL_TYPE_DESCNull() {
                return this.IsNull(this.tableHeaders.BILL_TYPE_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILL_TYPE_DESCNull() {
                this[this.tableHeaders.BILL_TYPE_DESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSALESNull() {
                return this.IsNull(this.tableHeaders.SALESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSALESNull() {
                this[this.tableHeaders.SALESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTRACT_NONull() {
                return this.IsNull(this.tableHeaders.CONTRACT_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTRACT_NONull() {
                this[this.tableHeaders.CONTRACT_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSOURCE_BILL_IDNull() {
                return this.IsNull(this.tableHeaders.SOURCE_BILL_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSOURCE_BILL_IDNull() {
                this[this.tableHeaders.SOURCE_BILL_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DATENull() {
                return this.IsNull(this.tableHeaders.CREATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DATENull() {
                this[this.tableHeaders.CREATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATORNull() {
                return this.IsNull(this.tableHeaders.CREATORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATORNull() {
                this[this.tableHeaders.CREATORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSUPPLIERNull() {
                return this.IsNull(this.tableHeaders.SUPPLIERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSUPPLIERNull() {
                this[this.tableHeaders.SUPPLIERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREMARKNull() {
                return this.IsNull(this.tableHeaders.REMARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREMARKNull() {
                this[this.tableHeaders.REMARKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsRow[] GetDetailsRows() {
                if ((this.Table.ChildRelations["Headers_Details"] == null)) {
                    return new DetailsRow[0];
                }
                else {
                    return ((DetailsRow[])(base.GetChildRows(this.Table.ChildRelations["Headers_Details"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuppliersRow[] GetSuppliersRows() {
                if ((this.Table.ChildRelations["Headers_Suppliers"] == null)) {
                    return new SuppliersRow[0];
                }
                else {
                    return ((SuppliersRow[])(base.GetChildRows(this.Table.ChildRelations["Headers_Suppliers"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DetailsRow : global::System.Data.DataRow {
            
            private DetailsDataTable tableDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDetails = ((DetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DETAIL_ID {
                get {
                    return ((string)(this[this.tableDetails.DETAIL_IDColumn]));
                }
                set {
                    this[this.tableDetails.DETAIL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BILL_ID {
                get {
                    try {
                        return ((string)(this[this.tableDetails.BILL_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Details”中列“BILL_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDetails.BILL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MATERIAL {
                get {
                    try {
                        return ((string)(this[this.tableDetails.MATERIALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Details”中列“MATERIAL”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDetails.MATERIALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MTL_NAME {
                get {
                    try {
                        return ((string)(this[this.tableDetails.MTL_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Details”中列“MTL_NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDetails.MTL_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PLAN_QTY {
                get {
                    try {
                        return ((string)(this[this.tableDetails.PLAN_QTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Details”中列“PLAN_QTY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDetails.PLAN_QTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNIT {
                get {
                    try {
                        return ((string)(this[this.tableDetails.UNITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Details”中列“UNIT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDetails.UNITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRICE {
                get {
                    try {
                        return ((string)(this[this.tableDetails.PRICEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Details”中列“PRICE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDetails.PRICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SPEC {
                get {
                    try {
                        return ((string)(this[this.tableDetails.SPECColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Details”中列“SPEC”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDetails.SPECColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REAL_QTY {
                get {
                    try {
                        return ((string)(this[this.tableDetails.REAL_QTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Details”中列“REAL_QTY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDetails.REAL_QTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadersRow HeadersRow {
                get {
                    return ((HeadersRow)(this.GetParentRow(this.Table.ParentRelations["Headers_Details"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Headers_Details"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILL_IDNull() {
                return this.IsNull(this.tableDetails.BILL_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILL_IDNull() {
                this[this.tableDetails.BILL_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMATERIALNull() {
                return this.IsNull(this.tableDetails.MATERIALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMATERIALNull() {
                this[this.tableDetails.MATERIALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMTL_NAMENull() {
                return this.IsNull(this.tableDetails.MTL_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMTL_NAMENull() {
                this[this.tableDetails.MTL_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLAN_QTYNull() {
                return this.IsNull(this.tableDetails.PLAN_QTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLAN_QTYNull() {
                this[this.tableDetails.PLAN_QTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNITNull() {
                return this.IsNull(this.tableDetails.UNITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNITNull() {
                this[this.tableDetails.UNITColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICENull() {
                return this.IsNull(this.tableDetails.PRICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICENull() {
                this[this.tableDetails.PRICEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSPECNull() {
                return this.IsNull(this.tableDetails.SPECColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSPECNull() {
                this[this.tableDetails.SPECColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREAL_QTYNull() {
                return this.IsNull(this.tableDetails.REAL_QTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREAL_QTYNull() {
                this[this.tableDetails.REAL_QTYColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SuppliersRow : global::System.Data.DataRow {
            
            private SuppliersDataTable tableSuppliers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SuppliersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSuppliers = ((SuppliersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SUP_CODE {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.SUP_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Suppliers”中列“SUP_CODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSuppliers.SUP_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PROVINCE {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.PROVINCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Suppliers”中列“PROVINCE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSuppliers.PROVINCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTACT {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.CONTACTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Suppliers”中列“CONTACT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSuppliers.CONTACTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POSTCODE {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.POSTCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Suppliers”中列“POSTCODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSuppliers.POSTCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PHONE {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.PHONEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Suppliers”中列“PHONE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSuppliers.PHONEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.ADDRESSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Suppliers”中列“ADDRESS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSuppliers.ADDRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadersRow HeadersRow {
                get {
                    return ((HeadersRow)(this.GetParentRow(this.Table.ParentRelations["Headers_Suppliers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Headers_Suppliers"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSUP_CODENull() {
                return this.IsNull(this.tableSuppliers.SUP_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSUP_CODENull() {
                this[this.tableSuppliers.SUP_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPROVINCENull() {
                return this.IsNull(this.tableSuppliers.PROVINCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPROVINCENull() {
                this[this.tableSuppliers.PROVINCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTACTNull() {
                return this.IsNull(this.tableSuppliers.CONTACTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTACTNull() {
                this[this.tableSuppliers.CONTACTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOSTCODENull() {
                return this.IsNull(this.tableSuppliers.POSTCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOSTCODENull() {
                this[this.tableSuppliers.POSTCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPHONENull() {
                return this.IsNull(this.tableSuppliers.PHONEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPHONENull() {
                this[this.tableSuppliers.PHONEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESSNull() {
                return this.IsNull(this.tableSuppliers.ADDRESSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESSNull() {
                this[this.tableSuppliers.ADDRESSColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HeadersRowChangeEvent : global::System.EventArgs {
            
            private HeadersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadersRowChangeEvent(HeadersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DetailsRowChangeEvent : global::System.EventArgs {
            
            private DetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsRowChangeEvent(DetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SuppliersRowChangeEvent : global::System.EventArgs {
            
            private SuppliersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuppliersRowChangeEvent(SuppliersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuppliersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591